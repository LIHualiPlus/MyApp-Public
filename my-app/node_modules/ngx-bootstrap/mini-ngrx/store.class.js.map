{"version":3,"file":"store.class.js","sourceRoot":"","sources":["../../.tmp/mini-ngrx/store.class.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,OAAO,EAAE,UAAU,EAAsB,MAAM,MAAM,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAG3D,IAAA;IAAkC,6BAAa;IAC7C,mBACU,WAA6B,EAC7B,QAA4B,EACpC,MAAuB;QAHzB,YAKE,iBAAO,SAGR;QAPS,iBAAW,GAAX,WAAW,CAAkB;QAC7B,cAAQ,GAAR,QAAQ,CAAoB;QAKpC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;KACtB;IAED,0BAAM,GAAN,UAAU,WAA4B;QACpC,IAAM,OAAO,GAAkB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;QAElE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;KAC7C;IAED,wBAAI,GAAJ,UAAQ,QAAwB;QAC9B,IAAM,KAAK,GAAG,IAAI,SAAS,CAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtE,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAE1B,MAAM,CAAC,KAAK,CAAC;KACd;IAED,4BAAQ,GAAR,UAAS,MAAc;QACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC/B;IAED,wBAAI,GAAJ,UAAK,MAAc;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC/B;IAED,yBAAK,GAAL,UAAM,GAAQ;QACZ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC7B;IAED,4BAAQ,GAAR;;KAEC;oBA7CH;EAOkC,UAAU,EAuC3C,CAAA;AAvCD,qBAuCC","sourcesContent":["/**\n * @copyright ngrx\n */\nimport { Observable, Observer, Operator } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Action, ActionReducer } from './index';\n\nexport class MiniStore<T> extends Observable<T> implements Observer<Action> {\n  constructor(\n    private _dispatcher: Observer<Action>,\n    private _reducer: ActionReducer<any>,\n    state$: Observable<any>\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<R>(pathOrMapFn: (state: T) => R): Observable<R> {\n    const mapped$: Observable<R> = this.source.pipe(map(pathOrMapFn));\n\n    return mapped$.pipe(distinctUntilChanged());\n  }\n\n  lift<R>(operator: Operator<T, R>): MiniStore<R> {\n    const store = new MiniStore<R>(this._dispatcher, this._reducer, this);\n    store.operator = operator;\n\n    return store;\n  }\n\n  dispatch(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  next(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  error(err: any) {\n    this._dispatcher.error(err);\n  }\n\n  complete() {\n    /*noop*/\n  }\n}\n"]}